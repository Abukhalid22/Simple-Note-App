name: Build, Test, Analyze, Scan and Deploy

on:
  push:
    branches:
      - master

jobs:
  build-test-analyze-deploy:
    runs-on: ubuntu-latest
    env:
      DJANGO_IMAGE_TAG: mctoosh94/mynotes:backend-${{ github.sha }}
      REACT_IMAGE_TAG: mctoosh94/mynotes:frontend-${{ github.sha }}
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      PAT: ${{ secrets.MY_GITHUB_TOKEN }} # PAT
      USER: mctoosh94 # Docker Hub username

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Fetch latest changes
        run: git fetch --prune --unshallow

      - name: Install dependencies
        run: |
          npm install --prefix frontend
          pip install -r requirements.txt
          pip install coverage

      - name: Run tests with coverage
        run: coverage run manage.py test

      - name: Generate coverage report in XML format
        run: coverage xml -o coverage.xml

      - name: Run SonarCloud Analysis
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }} # PAT
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=abukhalid22
            -Dsonar.projectKey=Abukhalid22_Simple-Note-App
            -Dsonar.python.coverage.reportPaths=coverage.xml

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test
          args: --severity-threshold=high  --sarif-file-output=snyk.sarif

      - name: Count total number of vulnerabilities
        run: |
          RESULTS_LENGTH=$(jq '.runs[0].results | length' snyk.sarif)
          echo "RESULTS_LENGTH=$RESULTS_LENGTH" >> $GITHUB_ENV
          echo $RESULTS_LENGTH
      
      - name: Pass_or_Fail_the_job
        run: |
          if [ "$RESULTS_LENGTH" != 0 ]; then
            echo "Job Failed"
            exit 1
          else
            echo "Pass"
          fi

      - name: Send notification on Slack using Webhooks
        uses: slackapi/slack-github-action@v1.24.0
        if: always()
        with:
          payload: |
            {
              "text": "*The Snyk scan result for the repo is : ${{ job.status }}* \n*Number of vulnerabilities : ${{ env.RESULTS_LENGTH }}* \n*Detail*: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.slack_webhook_url }}

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }} # Docker Token

      - name: Build and Push Django Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.DJANGO_IMAGE_TAG }}

      - name: Build and Push React Image
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.REACT_IMAGE_TAG }}

      - name: Update Kubernetes Manifests with New Image Tags
        run: |
          sed -i "s|image: mctoosh94/mynotes:backend-.*|image: ${{ env.DJANGO_IMAGE_TAG }}|" ./k8s/django-deployment.yaml
          sed -i "s|image: mctoosh94/mynotes:frontend-.*|image: ${{ env.REACT_IMAGE_TAG }}|" ./k8s/react-deployment.yaml
          
          # Check for changes and configure git
          git config user.name 'GitHub Actions'
          git config user.email 'actions@github.com'
          
          # Check if there are any changes
          git diff --quiet || {
            echo "Changes detected, updating Kubernetes manifests."
            
            # Add modified files to the staging area
            git add ./k8s/*.yaml
            
            # Commit and push the changes
            git commit -m "Update Kubernetes manifests to new image tags: ${{ github.sha }}"
            git push https://${{ secrets.ARGOCD_NOTES_APP_PAT }}:x-oauth-basic@github.com/abukhalid22/Simple-Note-App.git HEAD:master
          }

          # Add a sleep before scanning the images
      - name: Wait for Docker images to be available on dockerhub
        run: sleep 30s

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }} # Docker Token

      - name: Image Scan Django with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/mctoosh94/mynotes:backend-${{ github.sha }}' # Use Docker Hub registry
          format: 'sarif'
          output: 'trivy-image-results-django.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Image Scan React with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/mctoosh94/mynotes:frontend-${{ github.sha }}' # Use Docker Hub registry
          format: 'sarif'
          output: 'trivy-image-results-react.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload the scan result to GitHub Security Django
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-image-results-django.sarif'
          category: 'django-image'

      - name: Upload the scan result to GitHub Security React
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-image-results-react.sarif'
          category: 'react-image'
